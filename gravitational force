수입 게임
수입 시스템
수학을 수입하다

폭, 높이 = 1800, 1000

WHITE = (255,255,255)
BLACK = (0, 0, 0)
YELLOW = (10, 50, 100)
BLUE = (0, 0, 255)

G = 5e-3

클래스 파티클:
 def __init_(자체, x, y, 질량, vx=0, vy=0):
 self.x = x
 self.y = y
 자기.질량 = 질량
 self.vx =vx
 self.vy = vy

 defapply_force(자체, force):
 ax = 힘[0] / self.mass
 ay = force[1] / self.mass
 self.vx += ax
 self.vy +=ay

 def update(자체):
 self.x += self.vx
 self.y += self.vy

 기본 그림(자체, 화면, 색상, 반경):
 pygame.draw.circle(화면, 색상, (int(self.x), int(self.y)), radius

defcalculate_gravity(p1, p2):
 dx = p2.x - p1.x
 dy = p2.y - p1.y
 distance_ squared = dx**2 + dy**2
 distance = math.sqrt(distance_squared)
 distance_squared  == 0인 경우:
 반환 (0, 0)
 force_크기 = -G * (p1.mass * p2.mass) / distance_squared
 force_x = force_magnitude * dx / distance
 force_y = force_gridge * dy / distance
 리턴(force_x, force_y)

defdraw_gravitational_field(화면, 입자):
 입자의 경우:
 각도 범위(0, 360, 15): # 15도 간격으로 필드라인 그리기
 angle_rad = math.radians(각도)
 x = particle.x + math.cos(angle_rad) * 100
 y = particle.y + math.sin(angle_rad) * 100
 force = calute_ gravity(particle, 입자(x, y, 1))
 force_size = math.sqrt(force[0]**2 + force[1]**2)
 force_grimity > 0인 경우:
 force_dir_x = force[0] / force_magnitude
 force_dir_y = force[1] / force_magnitude
 end_x = particle.x + force_ dir_x * 30 # 시각화를 위한 스케일 팩터
 end_y = particle.y + force_dir_y * 30
 pygame.draw.line(화면, BLUE, (particle.x, particle.y), (end_x, end_y), 2)

기본 ():
 pygame.init ()
 화면 = pygame.display.set_mode(폭, 높이)
 pygame.display.set_caption("블랙홀 시뮬레이션")

 블랙_홀 = 파티클(WIDTH // 2, HEIGHT // 2, 1e6, 0, 0) # 1e6 = 10000

 입자 = [
 파티클(WIDTH // 2 + 150, HEIGHT // 2, 1e3, 0, 6) # 1e3 = 1000
 입자(WIDTH // 2 - 250, HIGHT // 2, 2e3, 1, 3),
 입자(WIDTH // 2 + 200, HIGHT // 2, 1e3, 3, -5),
        
 입자(WIDTH // 2 + 300, HEIGHT // 2, 1e3, 0.5, 0.5)
 ]

 시계 = pygame.time.시계()

 참인 경우:
 screen.fill(WHITE)

 pygame.event.get ():
 if event.type == pygame.그만두기:
 pygame.quit ()
 sys.exit()

 입자의 경우:
 중력_힘 = 계산_gravity(블랙_홀, 입자)
 particle.apply_힘(gravity_힘)

 particle = [math.sqrt((particle.x - black_hole.x) ** 2 + (particle.y - black_hole.y) ** 2) > 60인 경우 입자에 대한 particle]

 입자의 경우:
 particle.update ()

 black_hole.draw(화면, BLACK, 50)

 입자의 경우:
 particle.draw(화면, YELLOW, 15)

 draw_gravitational_field (화면, [블랙_홀] + 파티클) # 중력장 그리기

 pygame.display.flip()
 시계.tick(60)

__name__ == "_main__"인 경우:
 주 ()
